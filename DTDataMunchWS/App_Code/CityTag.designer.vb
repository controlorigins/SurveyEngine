'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="WebProjectMechanics")>  _
Partial Public Class CityTagDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertContentTag(instance As ContentTag)
    End Sub
  Partial Private Sub UpdateContentTag(instance As ContentTag)
    End Sub
  Partial Private Sub DeleteContentTag(instance As ContentTag)
    End Sub
  Partial Private Sub InsertDomain(instance As Domain)
    End Sub
  Partial Private Sub UpdateDomain(instance As Domain)
    End Sub
  Partial Private Sub DeleteDomain(instance As Domain)
    End Sub
  Partial Private Sub InsertDomainTag(instance As DomainTag)
    End Sub
  Partial Private Sub UpdateDomainTag(instance As DomainTag)
    End Sub
  Partial Private Sub DeleteDomainTag(instance As DomainTag)
    End Sub
  Partial Private Sub InsertLinkedContent(instance As LinkedContent)
    End Sub
  Partial Private Sub UpdateLinkedContent(instance As LinkedContent)
    End Sub
  Partial Private Sub DeleteLinkedContent(instance As LinkedContent)
    End Sub
  Partial Private Sub InsertFileImage(instance As FileImage)
    End Sub
  Partial Private Sub UpdateFileImage(instance As FileImage)
    End Sub
  Partial Private Sub DeleteFileImage(instance As FileImage)
    End Sub
  Partial Private Sub InsertTag(instance As Tag)
    End Sub
  Partial Private Sub UpdateTag(instance As Tag)
    End Sub
  Partial Private Sub DeleteTag(instance As Tag)
    End Sub
  Partial Private Sub InsertTagType(instance As TagType)
    End Sub
  Partial Private Sub UpdateTagType(instance As TagType)
    End Sub
  Partial Private Sub DeleteTagType(instance As TagType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DTDATAConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ContentTags() As System.Data.Linq.Table(Of ContentTag)
		Get
			Return Me.GetTable(Of ContentTag)
		End Get
	End Property
	
	Public ReadOnly Property Domains() As System.Data.Linq.Table(Of Domain)
		Get
			Return Me.GetTable(Of Domain)
		End Get
	End Property
	
	Public ReadOnly Property DomainTags() As System.Data.Linq.Table(Of DomainTag)
		Get
			Return Me.GetTable(Of DomainTag)
		End Get
	End Property
	
	Public ReadOnly Property LinkedContents() As System.Data.Linq.Table(Of LinkedContent)
		Get
			Return Me.GetTable(Of LinkedContent)
		End Get
	End Property
	
	Public ReadOnly Property FileImages() As System.Data.Linq.Table(Of FileImage)
		Get
			Return Me.GetTable(Of FileImage)
		End Get
	End Property
	
	Public ReadOnly Property Tags() As System.Data.Linq.Table(Of Tag)
		Get
			Return Me.GetTable(Of Tag)
		End Get
	End Property
	
	Public ReadOnly Property TagTypes() As System.Data.Linq.Table(Of TagType)
		Get
			Return Me.GetTable(Of TagType)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_DeleteRow")>  _
	Public Function ContentTag_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_Insert")>  _
	Public Function ContentTag_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkedContentID", DbType:="Int")> ByVal linkedContentID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TagID", DbType:="Int")> ByVal tagID As System.Nullable(Of Integer)) As ISingleResult(Of ContentTag_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), linkedContentID, tagID)
		Return CType(result.ReturnValue,ISingleResult(Of ContentTag_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_SelectAll")>  _
	Public Function ContentTag_SelectAll() As ISingleResult(Of ContentTag_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of ContentTag_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_SelectRow")>  _
	Public Function ContentTag_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As ISingleResult(Of ContentTag_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of ContentTag_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_Update")>  _
	Public Function ContentTag_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkedContentID", DbType:="Int")> ByVal linkedContentID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TagID", DbType:="Int")> ByVal tagID As System.Nullable(Of Integer)) As ISingleResult(Of ContentTag_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, linkedContentID, tagID)
		Return CType(result.ReturnValue,ISingleResult(Of ContentTag_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Domain_DeleteRow")>  _
	Public Function Domain_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainID", DbType:="Int")> ByVal domainID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Domain_Insert")>  _
	Public Function Domain_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainNM", DbType:="NVarChar(50)")> ByVal domainNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainDS", DbType:="NVarChar(250)")> ByVal domainDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainComment", DbType:="NVarChar(MAX)")> ByVal domainComment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="GalleryFolder", DbType:="NVarChar(250)")> ByVal galleryFolder As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainURL", DbType:="NVarChar(250)")> ByVal domainURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainTitle", DbType:="NVarChar(250)")> ByVal domainTitle As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UseBreadCrumbURL", DbType:="Bit")> ByVal useBreadCrumbURL As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VersionNo", DbType:="Int")> ByVal versionNo As System.Nullable(Of Integer)) As ISingleResult(Of Domain_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainNM, domainDS, domainComment, galleryFolder, domainURL, domainTitle, useBreadCrumbURL, modifiedID, modifiedDT, versionNo)
		Return CType(result.ReturnValue,ISingleResult(Of Domain_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Domain_SelectAll")>  _
	Public Function Domain_SelectAll() As ISingleResult(Of Domain_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of Domain_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Domain_SelectRow")>  _
	Public Function Domain_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainID", DbType:="Int")> ByVal domainID As System.Nullable(Of Integer)) As ISingleResult(Of Domain_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainID)
		Return CType(result.ReturnValue,ISingleResult(Of Domain_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Domain_Update")>  _
	Public Function Domain_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainID", DbType:="Int")> ByVal domainID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainNM", DbType:="NVarChar(50)")> ByVal domainNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainDS", DbType:="NVarChar(250)")> ByVal domainDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainComment", DbType:="NVarChar(MAX)")> ByVal domainComment As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="GalleryFolder", DbType:="NVarChar(250)")> ByVal galleryFolder As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainURL", DbType:="NVarChar(250)")> ByVal domainURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainTitle", DbType:="NVarChar(250)")> ByVal domainTitle As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UseBreadCrumbURL", DbType:="Bit")> ByVal useBreadCrumbURL As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VersionNo", DbType:="Int")> ByVal versionNo As System.Nullable(Of Integer)) As ISingleResult(Of Domain_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainID, domainNM, domainDS, domainComment, galleryFolder, domainURL, domainTitle, useBreadCrumbURL, modifiedID, modifiedDT, versionNo)
		Return CType(result.ReturnValue,ISingleResult(Of Domain_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DomainTag_DeleteRow")>  _
	Public Function DomainTag_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainTagID", DbType:="Int")> ByVal domainTagID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainTagID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DomainTag_Insert")>  _
	Public Function DomainTag_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainID", DbType:="Int")> ByVal domainID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CountryTagID", DbType:="Int")> ByVal countryTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateTagID", DbType:="Int")> ByVal stateTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityTagID", DbType:="Int")> ByVal cityTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of DomainTag_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainID, countryTagID, stateTagID, cityTagID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue,ISingleResult(Of DomainTag_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DomainTag_SelectAll")>  _
	Public Function DomainTag_SelectAll() As ISingleResult(Of DomainTag_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of DomainTag_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DomainTag_SelectRow")>  _
	Public Function DomainTag_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainTagID", DbType:="Int")> ByVal domainTagID As System.Nullable(Of Integer)) As ISingleResult(Of DomainTag_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainTagID)
		Return CType(result.ReturnValue,ISingleResult(Of DomainTag_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.DomainTag_Update")>  _
	Public Function DomainTag_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainTagID", DbType:="Int")> ByVal domainTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DomainID", DbType:="Int")> ByVal domainID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CountryTagID", DbType:="Int")> ByVal countryTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateTagID", DbType:="Int")> ByVal stateTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityTagID", DbType:="Int")> ByVal cityTagID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of DomainTag_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), domainTagID, domainID, countryTagID, stateTagID, cityTagID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue,ISingleResult(Of DomainTag_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_DeleteRow")>  _
	Public Function LinkedContent_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_Insert")>  _
	Public Function LinkedContent_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Title", DbType:="NVarChar(150)")> ByVal title As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(MAX)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PubDate", DbType:="DateTime")> ByVal pubDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndPubDate", DbType:="DateTime")> ByVal endPubDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IconURL", DbType:="NVarChar(500)")> ByVal iconURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageURL", DbType:="NVarChar(500)")> ByVal imageURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkURL", DbType:="NVarChar(500)")> ByVal linkURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LastEditDate", DbType:="DateTime")> ByVal lastEditDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkAnchorText", DbType:="NVarChar(250)")> ByVal linkAnchorText As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Active", DbType:="Bit")> ByVal active As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ReadMoreText", DbType:="NVarChar(50)")> ByVal readMoreText As String) As ISingleResult(Of LinkedContent_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), title, description, pubDate, endPubDate, iconURL, imageURL, linkURL, lastEditDate, linkAnchorText, active, readMoreText)
		Return CType(result.ReturnValue,ISingleResult(Of LinkedContent_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_SelectAll")>  _
	Public Function LinkedContent_SelectAll() As ISingleResult(Of LinkedContent_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of LinkedContent_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_SelectByTags")>  _
	Public Function LinkedContent_SelectByTags(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Keywords", DbType:="NVarChar(1000)")> ByVal keywords As String) As ISingleResult(Of LinkedContent_SelectByTagsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), keywords)
		Return CType(result.ReturnValue,ISingleResult(Of LinkedContent_SelectByTagsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_SelectRow")>  _
	Public Function LinkedContent_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As ISingleResult(Of LinkedContent_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of LinkedContent_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.LinkedContent_Update")>  _
	Public Function LinkedContent_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Title", DbType:="NVarChar(150)")> ByVal title As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(MAX)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PubDate", DbType:="DateTime")> ByVal pubDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EndPubDate", DbType:="DateTime")> ByVal endPubDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IconURL", DbType:="NVarChar(500)")> ByVal iconURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageURL", DbType:="NVarChar(500)")> ByVal imageURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkURL", DbType:="NVarChar(500)")> ByVal linkURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LastEditDate", DbType:="DateTime")> ByVal lastEditDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkAnchorText", DbType:="NVarChar(250)")> ByVal linkAnchorText As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Active", DbType:="Bit")> ByVal active As System.Nullable(Of Boolean), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ReadMoreText", DbType:="NVarChar(50)")> ByVal readMoreText As String) As ISingleResult(Of LinkedContent_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, title, description, pubDate, endPubDate, iconURL, imageURL, linkURL, lastEditDate, linkAnchorText, active, readMoreText)
		Return CType(result.ReturnValue,ISingleResult(Of LinkedContent_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Tag_DeleteRow")>  _
	Public Function Tag_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Tag_Insert")>  _
	Public Function Tag_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(100)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TagTypeID", DbType:="Int")> ByVal tagTypeID As System.Nullable(Of Integer)) As ISingleResult(Of Tag_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, tagTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of Tag_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Tag_SelectAll")>  _
	Public Function Tag_SelectAll() As ISingleResult(Of Tag_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of Tag_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Tag_SelectRow")>  _
	Public Function Tag_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer)) As ISingleResult(Of Tag_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id)
		Return CType(result.ReturnValue,ISingleResult(Of Tag_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Tag_Update")>  _
	Public Function Tag_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Id", DbType:="Int")> ByVal id As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(100)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TagTypeID", DbType:="Int")> ByVal tagTypeID As System.Nullable(Of Integer)) As ISingleResult(Of Tag_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), id, name, tagTypeID)
		Return CType(result.ReturnValue,ISingleResult(Of Tag_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TagType_DeleteRow")>  _
	Public Function TagType_DeleteRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ID", DbType:="Int")> ByVal iD As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iD)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TagType_Insert")>  _
	Public Function TagType_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descsription", DbType:="NVarChar(MAX)")> ByVal descsription As String) As ISingleResult(Of TagType_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, descsription)
		Return CType(result.ReturnValue,ISingleResult(Of TagType_InsertResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TagType_SelectAll")>  _
	Public Function TagType_SelectAll() As ISingleResult(Of TagType_SelectAllResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of TagType_SelectAllResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TagType_SelectRow")>  _
	Public Function TagType_SelectRow(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ID", DbType:="Int")> ByVal iD As System.Nullable(Of Integer)) As ISingleResult(Of TagType_SelectRowResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iD)
		Return CType(result.ReturnValue,ISingleResult(Of TagType_SelectRowResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.TagType_Update")>  _
	Public Function TagType_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ID", DbType:="Int")> ByVal iD As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Descsription", DbType:="NVarChar(MAX)")> ByVal descsription As String) As ISingleResult(Of TagType_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), iD, name, descsription)
		Return CType(result.ReturnValue,ISingleResult(Of TagType_UpdateResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_SelectByLinkedContentID")>  _
	Public Function ContentTag_SelectByLinkedContentID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkedContentID", DbType:="Int")> ByVal linkedContentID As System.Nullable(Of Integer)) As ISingleResult(Of ContentTag_SelectByLinkedContentIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), linkedContentID)
		Return CType(result.ReturnValue,ISingleResult(Of ContentTag_SelectByLinkedContentIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ContentTag_DeleteByLinkedContetID")>  _
	Public Function ContentTag_DeleteByLinkedContetID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LinkedContentID", DbType:="Int")> ByVal linkedContentID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), linkedContentID)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContentTag")>  _
Partial Public Class ContentTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Private _LinkedContent As EntityRef(Of LinkedContent)
	
	Private _Tag As EntityRef(Of Tag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLinkedContentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLinkedContentIDChanged()
    End Sub
    Partial Private Sub OnTagIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LinkedContent = CType(Nothing, EntityRef(Of LinkedContent))
		Me._Tag = CType(Nothing, EntityRef(Of Tag))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				If Me._LinkedContent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLinkedContentIDChanging(value)
				Me.SendPropertyChanging
				Me._LinkedContentID = value
				Me.SendPropertyChanged("LinkedContentID")
				Me.OnLinkedContentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				If Me._Tag.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTagIDChanging(value)
				Me.SendPropertyChanging
				Me._TagID = value
				Me.SendPropertyChanged("TagID")
				Me.OnTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LinkedContent_ContentTag", Storage:="_LinkedContent", ThisKey:="LinkedContentID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property LinkedContent() As LinkedContent
		Get
			Return Me._LinkedContent.Entity
		End Get
		Set
			Dim previousValue As LinkedContent = Me._LinkedContent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LinkedContent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LinkedContent.Entity = Nothing
					previousValue.ContentTags.Remove(Me)
				End If
				Me._LinkedContent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContentTags.Add(Me)
					Me._LinkedContentID = value.Id
				Else
					Me._LinkedContentID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("LinkedContent")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_ContentTag", Storage:="_Tag", ThisKey:="TagID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Tag() As Tag
		Get
			Return Me._Tag.Entity
		End Get
		Set
			Dim previousValue As Tag = Me._Tag.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tag.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tag.Entity = Nothing
					previousValue.ContentTags.Remove(Me)
				End If
				Me._Tag.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContentTags.Add(Me)
					Me._TagID = value.Id
				Else
					Me._TagID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tag")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Domain")>  _
Partial Public Class Domain
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DomainID As Integer
	
	Private _DomainNM As String
	
	Private _DomainDS As String
	
	Private _DomainComment As String
	
	Private _GalleryFolder As String
	
	Private _DomainURL As String
	
	Private _DomainTitle As String
	
	Private _UseBreadCrumbURL As Boolean
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _VersionNo As Integer
	
	Private _DomainTags As EntitySet(Of DomainTag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDomainIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDomainIDChanged()
    End Sub
    Partial Private Sub OnDomainNMChanging(value As String)
    End Sub
    Partial Private Sub OnDomainNMChanged()
    End Sub
    Partial Private Sub OnDomainDSChanging(value As String)
    End Sub
    Partial Private Sub OnDomainDSChanged()
    End Sub
    Partial Private Sub OnDomainCommentChanging(value As String)
    End Sub
    Partial Private Sub OnDomainCommentChanged()
    End Sub
    Partial Private Sub OnGalleryFolderChanging(value As String)
    End Sub
    Partial Private Sub OnGalleryFolderChanged()
    End Sub
    Partial Private Sub OnDomainURLChanging(value As String)
    End Sub
    Partial Private Sub OnDomainURLChanged()
    End Sub
    Partial Private Sub OnDomainTitleChanging(value As String)
    End Sub
    Partial Private Sub OnDomainTitleChanged()
    End Sub
    Partial Private Sub OnUseBreadCrumbURLChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUseBreadCrumbURLChanged()
    End Sub
    Partial Private Sub OnModifiedIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnModifiedIDChanged()
    End Sub
    Partial Private Sub OnModifiedDTChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDTChanged()
    End Sub
    Partial Private Sub OnVersionNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnVersionNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DomainTags = New EntitySet(Of DomainTag)(AddressOf Me.attach_DomainTags, AddressOf Me.detach_DomainTags)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me.OnDomainIDChanging(value)
				Me.SendPropertyChanging
				Me._DomainID = value
				Me.SendPropertyChanged("DomainID")
				Me.OnDomainIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainNM() As String
		Get
			Return Me._DomainNM
		End Get
		Set
			If (String.Equals(Me._DomainNM, value) = false) Then
				Me.OnDomainNMChanging(value)
				Me.SendPropertyChanging
				Me._DomainNM = value
				Me.SendPropertyChanged("DomainNM")
				Me.OnDomainNMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainDS", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainDS() As String
		Get
			Return Me._DomainDS
		End Get
		Set
			If (String.Equals(Me._DomainDS, value) = false) Then
				Me.OnDomainDSChanging(value)
				Me.SendPropertyChanging
				Me._DomainDS = value
				Me.SendPropertyChanged("DomainDS")
				Me.OnDomainDSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainComment", DbType:="NVarChar(MAX)")>  _
	Public Property DomainComment() As String
		Get
			Return Me._DomainComment
		End Get
		Set
			If (String.Equals(Me._DomainComment, value) = false) Then
				Me.OnDomainCommentChanging(value)
				Me.SendPropertyChanging
				Me._DomainComment = value
				Me.SendPropertyChanged("DomainComment")
				Me.OnDomainCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryFolder", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property GalleryFolder() As String
		Get
			Return Me._GalleryFolder
		End Get
		Set
			If (String.Equals(Me._GalleryFolder, value) = false) Then
				Me.OnGalleryFolderChanging(value)
				Me.SendPropertyChanging
				Me._GalleryFolder = value
				Me.SendPropertyChanged("GalleryFolder")
				Me.OnGalleryFolderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainURL", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainURL() As String
		Get
			Return Me._DomainURL
		End Get
		Set
			If (String.Equals(Me._DomainURL, value) = false) Then
				Me.OnDomainURLChanging(value)
				Me.SendPropertyChanging
				Me._DomainURL = value
				Me.SendPropertyChanged("DomainURL")
				Me.OnDomainURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTitle", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainTitle() As String
		Get
			Return Me._DomainTitle
		End Get
		Set
			If (String.Equals(Me._DomainTitle, value) = false) Then
				Me.OnDomainTitleChanging(value)
				Me.SendPropertyChanging
				Me._DomainTitle = value
				Me.SendPropertyChanged("DomainTitle")
				Me.OnDomainTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseBreadCrumbURL", DbType:="Bit NOT NULL")>  _
	Public Property UseBreadCrumbURL() As Boolean
		Get
			Return Me._UseBreadCrumbURL
		End Get
		Set
			If ((Me._UseBreadCrumbURL = value)  _
						= false) Then
				Me.OnUseBreadCrumbURLChanging(value)
				Me.SendPropertyChanging
				Me._UseBreadCrumbURL = value
				Me.SendPropertyChanged("UseBreadCrumbURL")
				Me.OnUseBreadCrumbURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNo", DbType:="Int NOT NULL")>  _
	Public Property VersionNo() As Integer
		Get
			Return Me._VersionNo
		End Get
		Set
			If ((Me._VersionNo = value)  _
						= false) Then
				Me.OnVersionNoChanging(value)
				Me.SendPropertyChanging
				Me._VersionNo = value
				Me.SendPropertyChanged("VersionNo")
				Me.OnVersionNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Domain_DomainTag", Storage:="_DomainTags", ThisKey:="DomainID", OtherKey:="DomainID")>  _
	Public Property DomainTags() As EntitySet(Of DomainTag)
		Get
			Return Me._DomainTags
		End Get
		Set
			Me._DomainTags.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DomainTags(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Domain = Me
	End Sub
	
	Private Sub detach_DomainTags(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Domain = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DomainTag")>  _
Partial Public Class DomainTag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DomainTagID As Integer
	
	Private _DomainID As Integer
	
	Private _CountryTagID As System.Nullable(Of Integer)
	
	Private _StateTagID As System.Nullable(Of Integer)
	
	Private _CityTagID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _Domain As EntityRef(Of Domain)
	
	Private _Tag As EntityRef(Of Tag)
	
	Private _Tag1 As EntityRef(Of Tag)
	
	Private _Tag2 As EntityRef(Of Tag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDomainTagIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDomainTagIDChanged()
    End Sub
    Partial Private Sub OnDomainIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDomainIDChanged()
    End Sub
    Partial Private Sub OnCountryTagIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCountryTagIDChanged()
    End Sub
    Partial Private Sub OnStateTagIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStateTagIDChanged()
    End Sub
    Partial Private Sub OnCityTagIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCityTagIDChanged()
    End Sub
    Partial Private Sub OnModifiedIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnModifiedIDChanged()
    End Sub
    Partial Private Sub OnModifiedDTChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Domain = CType(Nothing, EntityRef(Of Domain))
		Me._Tag = CType(Nothing, EntityRef(Of Tag))
		Me._Tag1 = CType(Nothing, EntityRef(Of Tag))
		Me._Tag2 = CType(Nothing, EntityRef(Of Tag))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTagID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DomainTagID() As Integer
		Get
			Return Me._DomainTagID
		End Get
		Set
			If ((Me._DomainTagID = value)  _
						= false) Then
				Me.OnDomainTagIDChanging(value)
				Me.SendPropertyChanging
				Me._DomainTagID = value
				Me.SendPropertyChanged("DomainTagID")
				Me.OnDomainTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				If Me._Domain.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDomainIDChanging(value)
				Me.SendPropertyChanging
				Me._DomainID = value
				Me.SendPropertyChanged("DomainID")
				Me.OnDomainIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryTagID", DbType:="Int")>  _
	Public Property CountryTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryTagID
		End Get
		Set
			If (Me._CountryTagID.Equals(value) = false) Then
				If Me._Tag.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCountryTagIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryTagID = value
				Me.SendPropertyChanged("CountryTagID")
				Me.OnCountryTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateTagID", DbType:="Int")>  _
	Public Property StateTagID() As System.Nullable(Of Integer)
		Get
			Return Me._StateTagID
		End Get
		Set
			If (Me._StateTagID.Equals(value) = false) Then
				If Me._Tag1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStateTagIDChanging(value)
				Me.SendPropertyChanging
				Me._StateTagID = value
				Me.SendPropertyChanged("StateTagID")
				Me.OnStateTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityTagID", DbType:="Int")>  _
	Public Property CityTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CityTagID
		End Get
		Set
			If (Me._CityTagID.Equals(value) = false) Then
				If Me._Tag2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCityTagIDChanging(value)
				Me.SendPropertyChanging
				Me._CityTagID = value
				Me.SendPropertyChanged("CityTagID")
				Me.OnCityTagIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Domain_DomainTag", Storage:="_Domain", ThisKey:="DomainID", OtherKey:="DomainID", IsForeignKey:=true)>  _
	Public Property Domain() As Domain
		Get
			Return Me._Domain.Entity
		End Get
		Set
			Dim previousValue As Domain = Me._Domain.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Domain.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Domain.Entity = Nothing
					previousValue.DomainTags.Remove(Me)
				End If
				Me._Domain.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DomainTags.Add(Me)
					Me._DomainID = value.DomainID
				Else
					Me._DomainID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Domain")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag", Storage:="_Tag", ThisKey:="CountryTagID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Tag() As Tag
		Get
			Return Me._Tag.Entity
		End Get
		Set
			Dim previousValue As Tag = Me._Tag.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tag.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tag.Entity = Nothing
					previousValue.DomainTags.Remove(Me)
				End If
				Me._Tag.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DomainTags.Add(Me)
					Me._CountryTagID = value.Id
				Else
					Me._CountryTagID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tag")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag1", Storage:="_Tag1", ThisKey:="StateTagID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Tag1() As Tag
		Get
			Return Me._Tag1.Entity
		End Get
		Set
			Dim previousValue As Tag = Me._Tag1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tag1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tag1.Entity = Nothing
					previousValue.DomainTags1.Remove(Me)
				End If
				Me._Tag1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DomainTags1.Add(Me)
					Me._StateTagID = value.Id
				Else
					Me._StateTagID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tag1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag2", Storage:="_Tag2", ThisKey:="CityTagID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Tag2() As Tag
		Get
			Return Me._Tag2.Entity
		End Get
		Set
			Dim previousValue As Tag = Me._Tag2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tag2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tag2.Entity = Nothing
					previousValue.DomainTags2.Remove(Me)
				End If
				Me._Tag2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DomainTags2.Add(Me)
					Me._CityTagID = value.Id
				Else
					Me._CityTagID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tag2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LinkedContent")>  _
Partial Public Class LinkedContent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Private _ContentTags As EntitySet(Of ContentTag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPubDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPubDateChanged()
    End Sub
    Partial Private Sub OnEndPubDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndPubDateChanged()
    End Sub
    Partial Private Sub OnIconURLChanging(value As String)
    End Sub
    Partial Private Sub OnIconURLChanged()
    End Sub
    Partial Private Sub OnImageURLChanging(value As String)
    End Sub
    Partial Private Sub OnImageURLChanged()
    End Sub
    Partial Private Sub OnLinkURLChanging(value As String)
    End Sub
    Partial Private Sub OnLinkURLChanged()
    End Sub
    Partial Private Sub OnLastEditDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastEditDateChanged()
    End Sub
    Partial Private Sub OnLinkAnchorTextChanging(value As String)
    End Sub
    Partial Private Sub OnLinkAnchorTextChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnReadMoreTextChanging(value As String)
    End Sub
    Partial Private Sub OnReadMoreTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContentTags = New EntitySet(Of ContentTag)(AddressOf Me.attach_ContentTags, AddressOf Me.detach_ContentTags)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me.OnPubDateChanging(value)
				Me.SendPropertyChanging
				Me._PubDate = value
				Me.SendPropertyChanged("PubDate")
				Me.OnPubDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me.OnEndPubDateChanging(value)
				Me.SendPropertyChanging
				Me._EndPubDate = value
				Me.SendPropertyChanged("EndPubDate")
				Me.OnEndPubDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me.OnIconURLChanging(value)
				Me.SendPropertyChanging
				Me._IconURL = value
				Me.SendPropertyChanged("IconURL")
				Me.OnIconURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me.OnImageURLChanging(value)
				Me.SendPropertyChanging
				Me._ImageURL = value
				Me.SendPropertyChanged("ImageURL")
				Me.OnImageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me.OnLinkURLChanging(value)
				Me.SendPropertyChanging
				Me._LinkURL = value
				Me.SendPropertyChanged("LinkURL")
				Me.OnLinkURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me.OnLastEditDateChanging(value)
				Me.SendPropertyChanging
				Me._LastEditDate = value
				Me.SendPropertyChanged("LastEditDate")
				Me.OnLastEditDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me.OnLinkAnchorTextChanging(value)
				Me.SendPropertyChanging
				Me._LinkAnchorText = value
				Me.SendPropertyChanged("LinkAnchorText")
				Me.OnLinkAnchorTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me.OnReadMoreTextChanging(value)
				Me.SendPropertyChanging
				Me._ReadMoreText = value
				Me.SendPropertyChanged("ReadMoreText")
				Me.OnReadMoreTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LinkedContent_ContentTag", Storage:="_ContentTags", ThisKey:="Id", OtherKey:="LinkedContentID")>  _
	Public Property ContentTags() As EntitySet(Of ContentTag)
		Get
			Return Me._ContentTags
		End Get
		Set
			Me._ContentTags.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContentTags(ByVal entity As ContentTag)
		Me.SendPropertyChanging
		entity.LinkedContent = Me
	End Sub
	
	Private Sub detach_ContentTags(ByVal entity As ContentTag)
		Me.SendPropertyChanging
		entity.LinkedContent = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FileImage")>  _
Partial Public Class FileImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageID As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFIleNM As String
	
	Private _ImageThumbFileNM As String
	
	Private _ImageComment As String
	
	Private _ImageDT As Date
	
	Private _IsActive As Boolean
	
	Private _CompanyID As Integer
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnImageNMChanging(value As String)
    End Sub
    Partial Private Sub OnImageNMChanged()
    End Sub
    Partial Private Sub OnImageDSChanging(value As String)
    End Sub
    Partial Private Sub OnImageDSChanged()
    End Sub
    Partial Private Sub OnImageFIleNMChanging(value As String)
    End Sub
    Partial Private Sub OnImageFIleNMChanged()
    End Sub
    Partial Private Sub OnImageThumbFileNMChanging(value As String)
    End Sub
    Partial Private Sub OnImageThumbFileNMChanged()
    End Sub
    Partial Private Sub OnImageCommentChanging(value As String)
    End Sub
    Partial Private Sub OnImageCommentChanged()
    End Sub
    Partial Private Sub OnImageDTChanging(value As Date)
    End Sub
    Partial Private Sub OnImageDTChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnCompanyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCompanyIDChanged()
    End Sub
    Partial Private Sub OnModifiedIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnModifiedIDChanged()
    End Sub
    Partial Private Sub OnModifiedDTChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me.OnImageNMChanging(value)
				Me.SendPropertyChanging
				Me._ImageNM = value
				Me.SendPropertyChanged("ImageNM")
				Me.OnImageNMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me.OnImageDSChanging(value)
				Me.SendPropertyChanging
				Me._ImageDS = value
				Me.SendPropertyChanged("ImageDS")
				Me.OnImageDSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFIleNM", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFIleNM() As String
		Get
			Return Me._ImageFIleNM
		End Get
		Set
			If (String.Equals(Me._ImageFIleNM, value) = false) Then
				Me.OnImageFIleNMChanging(value)
				Me.SendPropertyChanging
				Me._ImageFIleNM = value
				Me.SendPropertyChanged("ImageFIleNM")
				Me.OnImageFIleNMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageThumbFileNM", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageThumbFileNM() As String
		Get
			Return Me._ImageThumbFileNM
		End Get
		Set
			If (String.Equals(Me._ImageThumbFileNM, value) = false) Then
				Me.OnImageThumbFileNMChanging(value)
				Me.SendPropertyChanging
				Me._ImageThumbFileNM = value
				Me.SendPropertyChanged("ImageThumbFileNM")
				Me.OnImageThumbFileNMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageComment", DbType:="NVarChar(MAX)")>  _
	Public Property ImageComment() As String
		Get
			Return Me._ImageComment
		End Get
		Set
			If (String.Equals(Me._ImageComment, value) = false) Then
				Me.OnImageCommentChanging(value)
				Me.SendPropertyChanging
				Me._ImageComment = value
				Me.SendPropertyChanged("ImageComment")
				Me.OnImageCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDT", DbType:="DateTime NOT NULL")>  _
	Public Property ImageDT() As Date
		Get
			Return Me._ImageDT
		End Get
		Set
			If ((Me._ImageDT = value)  _
						= false) Then
				Me.OnImageDTChanging(value)
				Me.SendPropertyChanging
				Me._ImageDT = value
				Me.SendPropertyChanged("ImageDT")
				Me.OnImageDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyID", DbType:="Int NOT NULL")>  _
	Public Property CompanyID() As Integer
		Get
			Return Me._CompanyID
		End Get
		Set
			If ((Me._CompanyID = value)  _
						= false) Then
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tag")>  _
Partial Public Class Tag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TagTypeID As Integer
	
	Private _ContentTags As EntitySet(Of ContentTag)
	
	Private _DomainTags As EntitySet(Of DomainTag)
	
	Private _DomainTags1 As EntitySet(Of DomainTag)
	
	Private _DomainTags2 As EntitySet(Of DomainTag)
	
	Private _TagType As EntityRef(Of TagType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnTagTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTagTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContentTags = New EntitySet(Of ContentTag)(AddressOf Me.attach_ContentTags, AddressOf Me.detach_ContentTags)
		Me._DomainTags = New EntitySet(Of DomainTag)(AddressOf Me.attach_DomainTags, AddressOf Me.detach_DomainTags)
		Me._DomainTags1 = New EntitySet(Of DomainTag)(AddressOf Me.attach_DomainTags1, AddressOf Me.detach_DomainTags1)
		Me._DomainTags2 = New EntitySet(Of DomainTag)(AddressOf Me.attach_DomainTags2, AddressOf Me.detach_DomainTags2)
		Me._TagType = CType(Nothing, EntityRef(Of TagType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagTypeID", DbType:="Int NOT NULL")>  _
	Public Property TagTypeID() As Integer
		Get
			Return Me._TagTypeID
		End Get
		Set
			If ((Me._TagTypeID = value)  _
						= false) Then
				If Me._TagType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTagTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TagTypeID = value
				Me.SendPropertyChanged("TagTypeID")
				Me.OnTagTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_ContentTag", Storage:="_ContentTags", ThisKey:="Id", OtherKey:="TagID")>  _
	Public Property ContentTags() As EntitySet(Of ContentTag)
		Get
			Return Me._ContentTags
		End Get
		Set
			Me._ContentTags.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag", Storage:="_DomainTags", ThisKey:="Id", OtherKey:="CountryTagID")>  _
	Public Property DomainTags() As EntitySet(Of DomainTag)
		Get
			Return Me._DomainTags
		End Get
		Set
			Me._DomainTags.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag1", Storage:="_DomainTags1", ThisKey:="Id", OtherKey:="StateTagID")>  _
	Public Property DomainTags1() As EntitySet(Of DomainTag)
		Get
			Return Me._DomainTags1
		End Get
		Set
			Me._DomainTags1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tag_DomainTag2", Storage:="_DomainTags2", ThisKey:="Id", OtherKey:="CityTagID")>  _
	Public Property DomainTags2() As EntitySet(Of DomainTag)
		Get
			Return Me._DomainTags2
		End Get
		Set
			Me._DomainTags2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TagType_Tag", Storage:="_TagType", ThisKey:="TagTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property TagType() As TagType
		Get
			Return Me._TagType.Entity
		End Get
		Set
			Dim previousValue As TagType = Me._TagType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TagType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TagType.Entity = Nothing
					previousValue.Tags.Remove(Me)
				End If
				Me._TagType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tags.Add(Me)
					Me._TagTypeID = value.ID
				Else
					Me._TagTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TagType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContentTags(ByVal entity As ContentTag)
		Me.SendPropertyChanging
		entity.Tag = Me
	End Sub
	
	Private Sub detach_ContentTags(ByVal entity As ContentTag)
		Me.SendPropertyChanging
		entity.Tag = Nothing
	End Sub
	
	Private Sub attach_DomainTags(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag = Me
	End Sub
	
	Private Sub detach_DomainTags(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag = Nothing
	End Sub
	
	Private Sub attach_DomainTags1(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag1 = Me
	End Sub
	
	Private Sub detach_DomainTags1(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag1 = Nothing
	End Sub
	
	Private Sub attach_DomainTags2(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag2 = Me
	End Sub
	
	Private Sub detach_DomainTags2(ByVal entity As DomainTag)
		Me.SendPropertyChanging
		entity.Tag2 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TagType")>  _
Partial Public Class TagType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Descsription As String
	
	Private _Tags As EntitySet(Of Tag)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescsriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescsriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tags = New EntitySet(Of Tag)(AddressOf Me.attach_Tags, AddressOf Me.detach_Tags)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descsription", DbType:="NVarChar(MAX)")>  _
	Public Property Descsription() As String
		Get
			Return Me._Descsription
		End Get
		Set
			If (String.Equals(Me._Descsription, value) = false) Then
				Me.OnDescsriptionChanging(value)
				Me.SendPropertyChanging
				Me._Descsription = value
				Me.SendPropertyChanged("Descsription")
				Me.OnDescsriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TagType_Tag", Storage:="_Tags", ThisKey:="ID", OtherKey:="TagTypeID")>  _
	Public Property Tags() As EntitySet(Of Tag)
		Get
			Return Me._Tags
		End Get
		Set
			Me._Tags.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tags(ByVal entity As Tag)
		Me.SendPropertyChanging
		entity.TagType = Me
	End Sub
	
	Private Sub detach_Tags(ByVal entity As Tag)
		Me.SendPropertyChanging
		entity.TagType = Nothing
	End Sub
End Class

Partial Public Class ContentTag_InsertResult
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				Me._LinkedContentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me._TagID = value
			End If
		End Set
	End Property
End Class

Partial Public Class ContentTag_SelectAllResult
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				Me._LinkedContentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me._TagID = value
			End If
		End Set
	End Property
End Class

Partial Public Class ContentTag_SelectRowResult
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				Me._LinkedContentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me._TagID = value
			End If
		End Set
	End Property
End Class

Partial Public Class ContentTag_UpdateResult
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				Me._LinkedContentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me._TagID = value
			End If
		End Set
	End Property
End Class

Partial Public Class Domain_InsertResult
	
	Private _DomainID As Integer
	
	Private _DomainNM As String
	
	Private _DomainDS As String
	
	Private _DomainComment As String
	
	Private _GalleryFolder As String
	
	Private _DomainURL As String
	
	Private _DomainTitle As String
	
	Private _UseBreadCrumbURL As Boolean
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _VersionNo As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainNM() As String
		Get
			Return Me._DomainNM
		End Get
		Set
			If (String.Equals(Me._DomainNM, value) = false) Then
				Me._DomainNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainDS", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainDS() As String
		Get
			Return Me._DomainDS
		End Get
		Set
			If (String.Equals(Me._DomainDS, value) = false) Then
				Me._DomainDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainComment", DbType:="NVarChar(MAX)")>  _
	Public Property DomainComment() As String
		Get
			Return Me._DomainComment
		End Get
		Set
			If (String.Equals(Me._DomainComment, value) = false) Then
				Me._DomainComment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryFolder", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property GalleryFolder() As String
		Get
			Return Me._GalleryFolder
		End Get
		Set
			If (String.Equals(Me._GalleryFolder, value) = false) Then
				Me._GalleryFolder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainURL", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainURL() As String
		Get
			Return Me._DomainURL
		End Get
		Set
			If (String.Equals(Me._DomainURL, value) = false) Then
				Me._DomainURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTitle", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainTitle() As String
		Get
			Return Me._DomainTitle
		End Get
		Set
			If (String.Equals(Me._DomainTitle, value) = false) Then
				Me._DomainTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseBreadCrumbURL", DbType:="Bit NOT NULL")>  _
	Public Property UseBreadCrumbURL() As Boolean
		Get
			Return Me._UseBreadCrumbURL
		End Get
		Set
			If ((Me._UseBreadCrumbURL = value)  _
						= false) Then
				Me._UseBreadCrumbURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNo", DbType:="Int NOT NULL")>  _
	Public Property VersionNo() As Integer
		Get
			Return Me._VersionNo
		End Get
		Set
			If ((Me._VersionNo = value)  _
						= false) Then
				Me._VersionNo = value
			End If
		End Set
	End Property
End Class

Partial Public Class Domain_SelectAllResult
	
	Private _DomainID As Integer
	
	Private _DomainNM As String
	
	Private _DomainDS As String
	
	Private _DomainComment As String
	
	Private _GalleryFolder As String
	
	Private _DomainURL As String
	
	Private _DomainTitle As String
	
	Private _UseBreadCrumbURL As Boolean
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _VersionNo As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainNM() As String
		Get
			Return Me._DomainNM
		End Get
		Set
			If (String.Equals(Me._DomainNM, value) = false) Then
				Me._DomainNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainDS", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainDS() As String
		Get
			Return Me._DomainDS
		End Get
		Set
			If (String.Equals(Me._DomainDS, value) = false) Then
				Me._DomainDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainComment", DbType:="NVarChar(MAX)")>  _
	Public Property DomainComment() As String
		Get
			Return Me._DomainComment
		End Get
		Set
			If (String.Equals(Me._DomainComment, value) = false) Then
				Me._DomainComment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryFolder", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property GalleryFolder() As String
		Get
			Return Me._GalleryFolder
		End Get
		Set
			If (String.Equals(Me._GalleryFolder, value) = false) Then
				Me._GalleryFolder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainURL", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainURL() As String
		Get
			Return Me._DomainURL
		End Get
		Set
			If (String.Equals(Me._DomainURL, value) = false) Then
				Me._DomainURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTitle", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainTitle() As String
		Get
			Return Me._DomainTitle
		End Get
		Set
			If (String.Equals(Me._DomainTitle, value) = false) Then
				Me._DomainTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseBreadCrumbURL", DbType:="Bit NOT NULL")>  _
	Public Property UseBreadCrumbURL() As Boolean
		Get
			Return Me._UseBreadCrumbURL
		End Get
		Set
			If ((Me._UseBreadCrumbURL = value)  _
						= false) Then
				Me._UseBreadCrumbURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNo", DbType:="Int NOT NULL")>  _
	Public Property VersionNo() As Integer
		Get
			Return Me._VersionNo
		End Get
		Set
			If ((Me._VersionNo = value)  _
						= false) Then
				Me._VersionNo = value
			End If
		End Set
	End Property
End Class

Partial Public Class Domain_SelectRowResult
	
	Private _DomainID As Integer
	
	Private _DomainNM As String
	
	Private _DomainDS As String
	
	Private _DomainComment As String
	
	Private _GalleryFolder As String
	
	Private _DomainURL As String
	
	Private _DomainTitle As String
	
	Private _UseBreadCrumbURL As Boolean
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _VersionNo As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainNM() As String
		Get
			Return Me._DomainNM
		End Get
		Set
			If (String.Equals(Me._DomainNM, value) = false) Then
				Me._DomainNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainDS", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainDS() As String
		Get
			Return Me._DomainDS
		End Get
		Set
			If (String.Equals(Me._DomainDS, value) = false) Then
				Me._DomainDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainComment", DbType:="NVarChar(MAX)")>  _
	Public Property DomainComment() As String
		Get
			Return Me._DomainComment
		End Get
		Set
			If (String.Equals(Me._DomainComment, value) = false) Then
				Me._DomainComment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryFolder", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property GalleryFolder() As String
		Get
			Return Me._GalleryFolder
		End Get
		Set
			If (String.Equals(Me._GalleryFolder, value) = false) Then
				Me._GalleryFolder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainURL", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainURL() As String
		Get
			Return Me._DomainURL
		End Get
		Set
			If (String.Equals(Me._DomainURL, value) = false) Then
				Me._DomainURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTitle", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainTitle() As String
		Get
			Return Me._DomainTitle
		End Get
		Set
			If (String.Equals(Me._DomainTitle, value) = false) Then
				Me._DomainTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseBreadCrumbURL", DbType:="Bit NOT NULL")>  _
	Public Property UseBreadCrumbURL() As Boolean
		Get
			Return Me._UseBreadCrumbURL
		End Get
		Set
			If ((Me._UseBreadCrumbURL = value)  _
						= false) Then
				Me._UseBreadCrumbURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNo", DbType:="Int NOT NULL")>  _
	Public Property VersionNo() As Integer
		Get
			Return Me._VersionNo
		End Get
		Set
			If ((Me._VersionNo = value)  _
						= false) Then
				Me._VersionNo = value
			End If
		End Set
	End Property
End Class

Partial Public Class Domain_UpdateResult
	
	Private _DomainID As Integer
	
	Private _DomainNM As String
	
	Private _DomainDS As String
	
	Private _DomainComment As String
	
	Private _GalleryFolder As String
	
	Private _DomainURL As String
	
	Private _DomainTitle As String
	
	Private _UseBreadCrumbURL As Boolean
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _VersionNo As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainNM", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainNM() As String
		Get
			Return Me._DomainNM
		End Get
		Set
			If (String.Equals(Me._DomainNM, value) = false) Then
				Me._DomainNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainDS", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainDS() As String
		Get
			Return Me._DomainDS
		End Get
		Set
			If (String.Equals(Me._DomainDS, value) = false) Then
				Me._DomainDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainComment", DbType:="NVarChar(MAX)")>  _
	Public Property DomainComment() As String
		Get
			Return Me._DomainComment
		End Get
		Set
			If (String.Equals(Me._DomainComment, value) = false) Then
				Me._DomainComment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GalleryFolder", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property GalleryFolder() As String
		Get
			Return Me._GalleryFolder
		End Get
		Set
			If (String.Equals(Me._GalleryFolder, value) = false) Then
				Me._GalleryFolder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainURL", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainURL() As String
		Get
			Return Me._DomainURL
		End Get
		Set
			If (String.Equals(Me._DomainURL, value) = false) Then
				Me._DomainURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTitle", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property DomainTitle() As String
		Get
			Return Me._DomainTitle
		End Get
		Set
			If (String.Equals(Me._DomainTitle, value) = false) Then
				Me._DomainTitle = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseBreadCrumbURL", DbType:="Bit NOT NULL")>  _
	Public Property UseBreadCrumbURL() As Boolean
		Get
			Return Me._UseBreadCrumbURL
		End Get
		Set
			If ((Me._UseBreadCrumbURL = value)  _
						= false) Then
				Me._UseBreadCrumbURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VersionNo", DbType:="Int NOT NULL")>  _
	Public Property VersionNo() As Integer
		Get
			Return Me._VersionNo
		End Get
		Set
			If ((Me._VersionNo = value)  _
						= false) Then
				Me._VersionNo = value
			End If
		End Set
	End Property
End Class

Partial Public Class DomainTag_InsertResult
	
	Private _DomainTagID As Integer
	
	Private _DomainID As Integer
	
	Private _CountryTagID As System.Nullable(Of Integer)
	
	Private _StateTagID As System.Nullable(Of Integer)
	
	Private _CityTagID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTagID", DbType:="Int NOT NULL")>  _
	Public Property DomainTagID() As Integer
		Get
			Return Me._DomainTagID
		End Get
		Set
			If ((Me._DomainTagID = value)  _
						= false) Then
				Me._DomainTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryTagID", DbType:="Int")>  _
	Public Property CountryTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryTagID
		End Get
		Set
			If (Me._CountryTagID.Equals(value) = false) Then
				Me._CountryTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateTagID", DbType:="Int")>  _
	Public Property StateTagID() As System.Nullable(Of Integer)
		Get
			Return Me._StateTagID
		End Get
		Set
			If (Me._StateTagID.Equals(value) = false) Then
				Me._StateTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityTagID", DbType:="Int")>  _
	Public Property CityTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CityTagID
		End Get
		Set
			If (Me._CityTagID.Equals(value) = false) Then
				Me._CityTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class DomainTag_SelectAllResult
	
	Private _DomainTagID As Integer
	
	Private _DomainID As Integer
	
	Private _CountryTagID As System.Nullable(Of Integer)
	
	Private _StateTagID As System.Nullable(Of Integer)
	
	Private _CityTagID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTagID", DbType:="Int NOT NULL")>  _
	Public Property DomainTagID() As Integer
		Get
			Return Me._DomainTagID
		End Get
		Set
			If ((Me._DomainTagID = value)  _
						= false) Then
				Me._DomainTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryTagID", DbType:="Int")>  _
	Public Property CountryTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryTagID
		End Get
		Set
			If (Me._CountryTagID.Equals(value) = false) Then
				Me._CountryTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateTagID", DbType:="Int")>  _
	Public Property StateTagID() As System.Nullable(Of Integer)
		Get
			Return Me._StateTagID
		End Get
		Set
			If (Me._StateTagID.Equals(value) = false) Then
				Me._StateTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityTagID", DbType:="Int")>  _
	Public Property CityTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CityTagID
		End Get
		Set
			If (Me._CityTagID.Equals(value) = false) Then
				Me._CityTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class DomainTag_SelectRowResult
	
	Private _DomainTagID As Integer
	
	Private _DomainID As Integer
	
	Private _CountryTagID As System.Nullable(Of Integer)
	
	Private _StateTagID As System.Nullable(Of Integer)
	
	Private _CityTagID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTagID", DbType:="Int NOT NULL")>  _
	Public Property DomainTagID() As Integer
		Get
			Return Me._DomainTagID
		End Get
		Set
			If ((Me._DomainTagID = value)  _
						= false) Then
				Me._DomainTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryTagID", DbType:="Int")>  _
	Public Property CountryTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryTagID
		End Get
		Set
			If (Me._CountryTagID.Equals(value) = false) Then
				Me._CountryTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateTagID", DbType:="Int")>  _
	Public Property StateTagID() As System.Nullable(Of Integer)
		Get
			Return Me._StateTagID
		End Get
		Set
			If (Me._StateTagID.Equals(value) = false) Then
				Me._StateTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityTagID", DbType:="Int")>  _
	Public Property CityTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CityTagID
		End Get
		Set
			If (Me._CityTagID.Equals(value) = false) Then
				Me._CityTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class DomainTag_UpdateResult
	
	Private _DomainTagID As Integer
	
	Private _DomainID As Integer
	
	Private _CountryTagID As System.Nullable(Of Integer)
	
	Private _StateTagID As System.Nullable(Of Integer)
	
	Private _CityTagID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainTagID", DbType:="Int NOT NULL")>  _
	Public Property DomainTagID() As Integer
		Get
			Return Me._DomainTagID
		End Get
		Set
			If ((Me._DomainTagID = value)  _
						= false) Then
				Me._DomainTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DomainID", DbType:="Int NOT NULL")>  _
	Public Property DomainID() As Integer
		Get
			Return Me._DomainID
		End Get
		Set
			If ((Me._DomainID = value)  _
						= false) Then
				Me._DomainID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryTagID", DbType:="Int")>  _
	Public Property CountryTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryTagID
		End Get
		Set
			If (Me._CountryTagID.Equals(value) = false) Then
				Me._CountryTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateTagID", DbType:="Int")>  _
	Public Property StateTagID() As System.Nullable(Of Integer)
		Get
			Return Me._StateTagID
		End Get
		Set
			If (Me._StateTagID.Equals(value) = false) Then
				Me._StateTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityTagID", DbType:="Int")>  _
	Public Property CityTagID() As System.Nullable(Of Integer)
		Get
			Return Me._CityTagID
		End Get
		Set
			If (Me._CityTagID.Equals(value) = false) Then
				Me._CityTagID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class LinkedContent_InsertResult
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me._PubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me._EndPubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me._IconURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me._LinkURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me._LastEditDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me._LinkAnchorText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me._ReadMoreText = value
			End If
		End Set
	End Property
End Class

Partial Public Class LinkedContent_SelectAllResult
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me._PubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me._EndPubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me._IconURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me._LinkURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me._LastEditDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me._LinkAnchorText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me._ReadMoreText = value
			End If
		End Set
	End Property
End Class

Partial Public Class LinkedContent_SelectByTagsResult
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me._PubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me._EndPubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me._IconURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me._LinkURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me._LastEditDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me._LinkAnchorText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me._ReadMoreText = value
			End If
		End Set
	End Property
End Class

Partial Public Class LinkedContent_SelectRowResult
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me._PubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me._EndPubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me._IconURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me._LinkURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me._LastEditDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me._LinkAnchorText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me._ReadMoreText = value
			End If
		End Set
	End Property
End Class

Partial Public Class LinkedContent_UpdateResult
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _PubDate As System.Nullable(Of Date)
	
	Private _EndPubDate As System.Nullable(Of Date)
	
	Private _IconURL As String
	
	Private _ImageURL As String
	
	Private _LinkURL As String
	
	Private _LastEditDate As System.Nullable(Of Date)
	
	Private _LinkAnchorText As String
	
	Private _Active As Boolean
	
	Private _ReadMoreText As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PubDate", DbType:="DateTime")>  _
	Public Property PubDate() As System.Nullable(Of Date)
		Get
			Return Me._PubDate
		End Get
		Set
			If (Me._PubDate.Equals(value) = false) Then
				Me._PubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndPubDate", DbType:="DateTime")>  _
	Public Property EndPubDate() As System.Nullable(Of Date)
		Get
			Return Me._EndPubDate
		End Get
		Set
			If (Me._EndPubDate.Equals(value) = false) Then
				Me._EndPubDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IconURL", DbType:="NVarChar(500)")>  _
	Public Property IconURL() As String
		Get
			Return Me._IconURL
		End Get
		Set
			If (String.Equals(Me._IconURL, value) = false) Then
				Me._IconURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="NVarChar(500)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkURL", DbType:="NVarChar(500)")>  _
	Public Property LinkURL() As String
		Get
			Return Me._LinkURL
		End Get
		Set
			If (String.Equals(Me._LinkURL, value) = false) Then
				Me._LinkURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastEditDate", DbType:="DateTime")>  _
	Public Property LastEditDate() As System.Nullable(Of Date)
		Get
			Return Me._LastEditDate
		End Get
		Set
			If (Me._LastEditDate.Equals(value) = false) Then
				Me._LastEditDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkAnchorText", DbType:="NVarChar(250)")>  _
	Public Property LinkAnchorText() As String
		Get
			Return Me._LinkAnchorText
		End Get
		Set
			If (String.Equals(Me._LinkAnchorText, value) = false) Then
				Me._LinkAnchorText = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me._Active = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadMoreText", DbType:="NVarChar(50)")>  _
	Public Property ReadMoreText() As String
		Get
			Return Me._ReadMoreText
		End Get
		Set
			If (String.Equals(Me._ReadMoreText, value) = false) Then
				Me._ReadMoreText = value
			End If
		End Set
	End Property
End Class

Partial Public Class Tag_InsertResult
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TagTypeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagTypeID", DbType:="Int NOT NULL")>  _
	Public Property TagTypeID() As Integer
		Get
			Return Me._TagTypeID
		End Get
		Set
			If ((Me._TagTypeID = value)  _
						= false) Then
				Me._TagTypeID = value
			End If
		End Set
	End Property
End Class

Partial Public Class Tag_SelectAllResult
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TagTypeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagTypeID", DbType:="Int NOT NULL")>  _
	Public Property TagTypeID() As Integer
		Get
			Return Me._TagTypeID
		End Get
		Set
			If ((Me._TagTypeID = value)  _
						= false) Then
				Me._TagTypeID = value
			End If
		End Set
	End Property
End Class

Partial Public Class Tag_SelectRowResult
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TagTypeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagTypeID", DbType:="Int NOT NULL")>  _
	Public Property TagTypeID() As Integer
		Get
			Return Me._TagTypeID
		End Get
		Set
			If ((Me._TagTypeID = value)  _
						= false) Then
				Me._TagTypeID = value
			End If
		End Set
	End Property
End Class

Partial Public Class Tag_UpdateResult
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TagTypeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagTypeID", DbType:="Int NOT NULL")>  _
	Public Property TagTypeID() As Integer
		Get
			Return Me._TagTypeID
		End Get
		Set
			If ((Me._TagTypeID = value)  _
						= false) Then
				Me._TagTypeID = value
			End If
		End Set
	End Property
End Class

Partial Public Class TagType_InsertResult
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Descsription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descsription", DbType:="NVarChar(MAX)")>  _
	Public Property Descsription() As String
		Get
			Return Me._Descsription
		End Get
		Set
			If (String.Equals(Me._Descsription, value) = false) Then
				Me._Descsription = value
			End If
		End Set
	End Property
End Class

Partial Public Class TagType_SelectAllResult
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Descsription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descsription", DbType:="NVarChar(MAX)")>  _
	Public Property Descsription() As String
		Get
			Return Me._Descsription
		End Get
		Set
			If (String.Equals(Me._Descsription, value) = false) Then
				Me._Descsription = value
			End If
		End Set
	End Property
End Class

Partial Public Class TagType_SelectRowResult
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Descsription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descsription", DbType:="NVarChar(MAX)")>  _
	Public Property Descsription() As String
		Get
			Return Me._Descsription
		End Get
		Set
			If (String.Equals(Me._Descsription, value) = false) Then
				Me._Descsription = value
			End If
		End Set
	End Property
End Class

Partial Public Class TagType_UpdateResult
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Descsription As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descsription", DbType:="NVarChar(MAX)")>  _
	Public Property Descsription() As String
		Get
			Return Me._Descsription
		End Get
		Set
			If (String.Equals(Me._Descsription, value) = false) Then
				Me._Descsription = value
			End If
		End Set
	End Property
End Class

Partial Public Class ContentTag_SelectByLinkedContentIDResult
	
	Private _Id As Integer
	
	Private _LinkedContentID As Integer
	
	Private _TagID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkedContentID", DbType:="Int NOT NULL")>  _
	Public Property LinkedContentID() As Integer
		Get
			Return Me._LinkedContentID
		End Get
		Set
			If ((Me._LinkedContentID = value)  _
						= false) Then
				Me._LinkedContentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TagID", DbType:="Int NOT NULL")>  _
	Public Property TagID() As Integer
		Get
			Return Me._TagID
		End Get
		Set
			If ((Me._TagID = value)  _
						= false) Then
				Me._TagID = value
			End If
		End Set
	End Property
End Class
