'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="COSAS_NYL")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAppProperty(instance As AppProperty)
    End Sub
  Partial Private Sub UpdateAppProperty(instance As AppProperty)
    End Sub
  Partial Private Sub DeleteAppProperty(instance As AppProperty)
    End Sub
  Partial Private Sub InsertChartSetting(instance As ChartSetting)
    End Sub
  Partial Private Sub UpdateChartSetting(instance As ChartSetting)
    End Sub
  Partial Private Sub DeleteChartSetting(instance As ChartSetting)
    End Sub
  Partial Private Sub InsertCOArtical(instance As COArtical)
    End Sub
  Partial Private Sub UpdateCOArtical(instance As COArtical)
    End Sub
  Partial Private Sub DeleteCOArtical(instance As COArtical)
    End Sub
  Partial Private Sub InsertSiteApp(instance As SiteApp)
    End Sub
  Partial Private Sub UpdateSiteApp(instance As SiteApp)
    End Sub
  Partial Private Sub DeleteSiteApp(instance As SiteApp)
    End Sub
  Partial Private Sub InsertSiteAppMenu(instance As SiteAppMenu)
    End Sub
  Partial Private Sub UpdateSiteAppMenu(instance As SiteAppMenu)
    End Sub
  Partial Private Sub DeleteSiteAppMenu(instance As SiteAppMenu)
    End Sub
  Partial Private Sub InsertSiteRole(instance As SiteRole)
    End Sub
  Partial Private Sub UpdateSiteRole(instance As SiteRole)
    End Sub
  Partial Private Sub DeleteSiteRole(instance As SiteRole)
    End Sub
  Partial Private Sub InsertSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub UpdateSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub DeleteSiteUser(instance As SiteUser)
    End Sub
  Partial Private Sub InsertUserAppProperty(instance As UserAppProperty)
    End Sub
  Partial Private Sub UpdateUserAppProperty(instance As UserAppProperty)
    End Sub
  Partial Private Sub DeleteUserAppProperty(instance As UserAppProperty)
    End Sub
  Partial Private Sub InsertUserAppRelation(instance As UserAppRelation)
    End Sub
  Partial Private Sub UpdateUserAppRelation(instance As UserAppRelation)
    End Sub
  Partial Private Sub DeleteUserAppRelation(instance As UserAppRelation)
    End Sub
  Partial Private Sub InsertUserMessage(instance As UserMessage)
    End Sub
  Partial Private Sub UpdateUserMessage(instance As UserMessage)
    End Sub
  Partial Private Sub DeleteUserMessage(instance As UserMessage)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.COPortal.My.MySettings.Default.COSAS_NYLConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AppProperties() As System.Data.Linq.Table(Of AppProperty)
		Get
			Return Me.GetTable(Of AppProperty)
		End Get
	End Property
	
	Public ReadOnly Property ChartSettings() As System.Data.Linq.Table(Of ChartSetting)
		Get
			Return Me.GetTable(Of ChartSetting)
		End Get
	End Property
	
	Public ReadOnly Property COArticals() As System.Data.Linq.Table(Of COArtical)
		Get
			Return Me.GetTable(Of COArtical)
		End Get
	End Property
	
	Public ReadOnly Property SiteApps() As System.Data.Linq.Table(Of SiteApp)
		Get
			Return Me.GetTable(Of SiteApp)
		End Get
	End Property
	
	Public ReadOnly Property SiteAppMenus() As System.Data.Linq.Table(Of SiteAppMenu)
		Get
			Return Me.GetTable(Of SiteAppMenu)
		End Get
	End Property
	
	Public ReadOnly Property SiteRoles() As System.Data.Linq.Table(Of SiteRole)
		Get
			Return Me.GetTable(Of SiteRole)
		End Get
	End Property
	
	Public ReadOnly Property SiteUsers() As System.Data.Linq.Table(Of SiteUser)
		Get
			Return Me.GetTable(Of SiteUser)
		End Get
	End Property
	
	Public ReadOnly Property UserAppProperties() As System.Data.Linq.Table(Of UserAppProperty)
		Get
			Return Me.GetTable(Of UserAppProperty)
		End Get
	End Property
	
	Public ReadOnly Property UserAppRelations() As System.Data.Linq.Table(Of UserAppRelation)
		Get
			Return Me.GetTable(Of UserAppRelation)
		End Get
	End Property
	
	Public ReadOnly Property UserMessages() As System.Data.Linq.Table(Of UserMessage)
		Get
			Return Me.GetTable(Of UserMessage)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AppProperty")>  _
Partial Public Class AppProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _SiteAppID As Integer
	
	Private _Key As String
	
	Private _Value As String
	
	Private _SiteApp As EntityRef(Of SiteApp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSiteAppIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteAppIDChanged()
    End Sub
    Partial Private Sub OnKeyChanging(value As String)
    End Sub
    Partial Private Sub OnKeyChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteApp = CType(Nothing, EntityRef(Of SiteApp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteAppID", DbType:="Int NOT NULL")>  _
	Public Property SiteAppID() As Integer
		Get
			Return Me._SiteAppID
		End Get
		Set
			If ((Me._SiteAppID = value)  _
						= false) Then
				If Me._SiteApp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSiteAppIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteAppID = value
				Me.SendPropertyChanged("SiteAppID")
				Me.OnSiteAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Key]", Storage:="_Key", DbType:="NVarChar(50)")>  _
	Public Property Key() As String
		Get
			Return Me._Key
		End Get
		Set
			If (String.Equals(Me._Key, value) = false) Then
				Me.OnKeyChanging(value)
				Me.SendPropertyChanging
				Me._Key = value
				Me.SendPropertyChanged("Key")
				Me.OnKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(500)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_AppProperty", Storage:="_SiteApp", ThisKey:="SiteAppID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SiteApp() As SiteApp
		Get
			Return Me._SiteApp.Entity
		End Get
		Set
			Dim previousValue As SiteApp = Me._SiteApp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteApp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteApp.Entity = Nothing
					previousValue.AppProperties.Remove(Me)
				End If
				Me._SiteApp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AppProperties.Add(Me)
					Me._SiteAppID = value.Id
				Else
					Me._SiteAppID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteApp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ChartSetting")>  _
Partial Public Class ChartSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _SiteUserID As Integer
	
	Private _SiteAppID As Integer
	
	Private _SettingType As String
	
	Private _SettingName As String
	
	Private _SettingValue As String
	
	Private _SettingValueEnhanced As String
	
	Private _DateCreated As Date
	
	Private _LastUpdated As Date
	
	Private _SiteApp As EntityRef(Of SiteApp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSiteUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteUserIDChanged()
    End Sub
    Partial Private Sub OnSiteAppIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteAppIDChanged()
    End Sub
    Partial Private Sub OnSettingTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSettingTypeChanged()
    End Sub
    Partial Private Sub OnSettingNameChanging(value As String)
    End Sub
    Partial Private Sub OnSettingNameChanged()
    End Sub
    Partial Private Sub OnSettingValueChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueChanged()
    End Sub
    Partial Private Sub OnSettingValueEnhancedChanging(value As String)
    End Sub
    Partial Private Sub OnSettingValueEnhancedChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnLastUpdatedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteApp = CType(Nothing, EntityRef(Of SiteApp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteUserID", DbType:="Int NOT NULL")>  _
	Public Property SiteUserID() As Integer
		Get
			Return Me._SiteUserID
		End Get
		Set
			If ((Me._SiteUserID = value)  _
						= false) Then
				Me.OnSiteUserIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteUserID = value
				Me.SendPropertyChanged("SiteUserID")
				Me.OnSiteUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteAppID", DbType:="Int NOT NULL")>  _
	Public Property SiteAppID() As Integer
		Get
			Return Me._SiteAppID
		End Get
		Set
			If ((Me._SiteAppID = value)  _
						= false) Then
				If Me._SiteApp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSiteAppIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteAppID = value
				Me.SendPropertyChanged("SiteAppID")
				Me.OnSiteAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingType", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingType() As String
		Get
			Return Me._SettingType
		End Get
		Set
			If (String.Equals(Me._SettingType, value) = false) Then
				Me.OnSettingTypeChanging(value)
				Me.SendPropertyChanging
				Me._SettingType = value
				Me.SendPropertyChanged("SettingType")
				Me.OnSettingTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingName() As String
		Get
			Return Me._SettingName
		End Get
		Set
			If (String.Equals(Me._SettingName, value) = false) Then
				Me.OnSettingNameChanging(value)
				Me.SendPropertyChanging
				Me._SettingName = value
				Me.SendPropertyChanged("SettingName")
				Me.OnSettingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValue", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property SettingValue() As String
		Get
			Return Me._SettingValue
		End Get
		Set
			If (String.Equals(Me._SettingValue, value) = false) Then
				Me.OnSettingValueChanging(value)
				Me.SendPropertyChanging
				Me._SettingValue = value
				Me.SendPropertyChanged("SettingValue")
				Me.OnSettingValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SettingValueEnhanced", DbType:="NVarChar(MAX)")>  _
	Public Property SettingValueEnhanced() As String
		Get
			Return Me._SettingValueEnhanced
		End Get
		Set
			If (String.Equals(Me._SettingValueEnhanced, value) = false) Then
				Me.OnSettingValueEnhancedChanging(value)
				Me.SendPropertyChanging
				Me._SettingValueEnhanced = value
				Me.SendPropertyChanged("SettingValueEnhanced")
				Me.OnSettingValueEnhancedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdated", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdated() As Date
		Get
			Return Me._LastUpdated
		End Get
		Set
			If ((Me._LastUpdated = value)  _
						= false) Then
				Me.OnLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdated = value
				Me.SendPropertyChanged("LastUpdated")
				Me.OnLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_ChartSetting", Storage:="_SiteApp", ThisKey:="SiteAppID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SiteApp() As SiteApp
		Get
			Return Me._SiteApp.Entity
		End Get
		Set
			Dim previousValue As SiteApp = Me._SiteApp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteApp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteApp.Entity = Nothing
					previousValue.ChartSettings.Remove(Me)
				End If
				Me._SiteApp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ChartSettings.Add(Me)
					Me._SiteAppID = value.Id
				Else
					Me._SiteAppID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteApp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.COArtical")>  _
Partial Public Class COArtical
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _KeyWords As String
	
	Private _Body As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _imageUrl As String
	
	Private _ButtonTitle As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnKeyWordsChanging(value As String)
    End Sub
    Partial Private Sub OnKeyWordsChanged()
    End Sub
    Partial Private Sub OnBodyChanging(value As String)
    End Sub
    Partial Private Sub OnBodyChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnimageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnimageUrlChanged()
    End Sub
    Partial Private Sub OnButtonTitleChanging(value As String)
    End Sub
    Partial Private Sub OnButtonTitleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(80)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyWords", DbType:="NVarChar(500)")>  _
	Public Property KeyWords() As String
		Get
			Return Me._KeyWords
		End Get
		Set
			If (String.Equals(Me._KeyWords, value) = false) Then
				Me.OnKeyWordsChanging(value)
				Me.SendPropertyChanging
				Me._KeyWords = value
				Me.SendPropertyChanged("KeyWords")
				Me.OnKeyWordsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Body", DbType:="NVarChar(500)")>  _
	Public Property Body() As String
		Get
			Return Me._Body
		End Get
		Set
			If (String.Equals(Me._Body, value) = false) Then
				Me.OnBodyChanging(value)
				Me.SendPropertyChanging
				Me._Body = value
				Me.SendPropertyChanged("Body")
				Me.OnBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imageUrl", DbType:="NVarChar(250)")>  _
	Public Property imageUrl() As String
		Get
			Return Me._imageUrl
		End Get
		Set
			If (String.Equals(Me._imageUrl, value) = false) Then
				Me.OnimageUrlChanging(value)
				Me.SendPropertyChanging
				Me._imageUrl = value
				Me.SendPropertyChanged("imageUrl")
				Me.OnimageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ButtonTitle", DbType:="NVarChar(50)")>  _
	Public Property ButtonTitle() As String
		Get
			Return Me._ButtonTitle
		End Get
		Set
			If (String.Equals(Me._ButtonTitle, value) = false) Then
				Me.OnButtonTitleChanging(value)
				Me.SendPropertyChanging
				Me._ButtonTitle = value
				Me.SendPropertyChanged("ButtonTitle")
				Me.OnButtonTitleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteApp")>  _
Partial Public Class SiteApp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _AppName As String
	
	Private _AppDiscription As String
	
	Private _ApplicationFolder As String
	
	Private _DefaultAppPage As Integer
	
	Private _AppProperties As EntitySet(Of AppProperty)
	
	Private _ChartSettings As EntitySet(Of ChartSetting)
	
	Private _SiteAppMenus As EntitySet(Of SiteAppMenu)
	
	Private _UserAppRelations As EntitySet(Of UserAppRelation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnAppNameChanging(value As String)
    End Sub
    Partial Private Sub OnAppNameChanged()
    End Sub
    Partial Private Sub OnAppDiscriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAppDiscriptionChanged()
    End Sub
    Partial Private Sub OnApplicationFolderChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationFolderChanged()
    End Sub
    Partial Private Sub OnDefaultAppPageChanging(value As Integer)
    End Sub
    Partial Private Sub OnDefaultAppPageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AppProperties = New EntitySet(Of AppProperty)(AddressOf Me.attach_AppProperties, AddressOf Me.detach_AppProperties)
		Me._ChartSettings = New EntitySet(Of ChartSetting)(AddressOf Me.attach_ChartSettings, AddressOf Me.detach_ChartSettings)
		Me._SiteAppMenus = New EntitySet(Of SiteAppMenu)(AddressOf Me.attach_SiteAppMenus, AddressOf Me.detach_SiteAppMenus)
		Me._UserAppRelations = New EntitySet(Of UserAppRelation)(AddressOf Me.attach_UserAppRelations, AddressOf Me.detach_UserAppRelations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property AppName() As String
		Get
			Return Me._AppName
		End Get
		Set
			If (String.Equals(Me._AppName, value) = false) Then
				Me.OnAppNameChanging(value)
				Me.SendPropertyChanging
				Me._AppName = value
				Me.SendPropertyChanged("AppName")
				Me.OnAppNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppDiscription", DbType:="NText NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AppDiscription() As String
		Get
			Return Me._AppDiscription
		End Get
		Set
			If (String.Equals(Me._AppDiscription, value) = false) Then
				Me.OnAppDiscriptionChanging(value)
				Me.SendPropertyChanging
				Me._AppDiscription = value
				Me.SendPropertyChanged("AppDiscription")
				Me.OnAppDiscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationFolder", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationFolder() As String
		Get
			Return Me._ApplicationFolder
		End Get
		Set
			If (String.Equals(Me._ApplicationFolder, value) = false) Then
				Me.OnApplicationFolderChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationFolder = value
				Me.SendPropertyChanged("ApplicationFolder")
				Me.OnApplicationFolderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultAppPage", DbType:="Int NOT NULL")>  _
	Public Property DefaultAppPage() As Integer
		Get
			Return Me._DefaultAppPage
		End Get
		Set
			If ((Me._DefaultAppPage = value)  _
						= false) Then
				Me.OnDefaultAppPageChanging(value)
				Me.SendPropertyChanging
				Me._DefaultAppPage = value
				Me.SendPropertyChanged("DefaultAppPage")
				Me.OnDefaultAppPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_AppProperty", Storage:="_AppProperties", ThisKey:="Id", OtherKey:="SiteAppID")>  _
	Public Property AppProperties() As EntitySet(Of AppProperty)
		Get
			Return Me._AppProperties
		End Get
		Set
			Me._AppProperties.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_ChartSetting", Storage:="_ChartSettings", ThisKey:="Id", OtherKey:="SiteAppID")>  _
	Public Property ChartSettings() As EntitySet(Of ChartSetting)
		Get
			Return Me._ChartSettings
		End Get
		Set
			Me._ChartSettings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_SiteAppMenu", Storage:="_SiteAppMenus", ThisKey:="Id", OtherKey:="SiteAppID")>  _
	Public Property SiteAppMenus() As EntitySet(Of SiteAppMenu)
		Get
			Return Me._SiteAppMenus
		End Get
		Set
			Me._SiteAppMenus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_UserAppRelation", Storage:="_UserAppRelations", ThisKey:="Id", OtherKey:="SiteAppID")>  _
	Public Property UserAppRelations() As EntitySet(Of UserAppRelation)
		Get
			Return Me._UserAppRelations
		End Get
		Set
			Me._UserAppRelations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AppProperties(ByVal entity As AppProperty)
		Me.SendPropertyChanging
		entity.SiteApp = Me
	End Sub
	
	Private Sub detach_AppProperties(ByVal entity As AppProperty)
		Me.SendPropertyChanging
		entity.SiteApp = Nothing
	End Sub
	
	Private Sub attach_ChartSettings(ByVal entity As ChartSetting)
		Me.SendPropertyChanging
		entity.SiteApp = Me
	End Sub
	
	Private Sub detach_ChartSettings(ByVal entity As ChartSetting)
		Me.SendPropertyChanging
		entity.SiteApp = Nothing
	End Sub
	
	Private Sub attach_SiteAppMenus(ByVal entity As SiteAppMenu)
		Me.SendPropertyChanging
		entity.SiteApp = Me
	End Sub
	
	Private Sub detach_SiteAppMenus(ByVal entity As SiteAppMenu)
		Me.SendPropertyChanging
		entity.SiteApp = Nothing
	End Sub
	
	Private Sub attach_UserAppRelations(ByVal entity As UserAppRelation)
		Me.SendPropertyChanging
		entity.SiteApp = Me
	End Sub
	
	Private Sub detach_UserAppRelations(ByVal entity As UserAppRelation)
		Me.SendPropertyChanging
		entity.SiteApp = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteAppMenu")>  _
Partial Public Class SiteAppMenu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _SiteAppID As System.Nullable(Of Integer)
	
	Private _MenuText As String
	
	Private _TartgetPage As String
	
	Private _GlyphName As String
	
	Private _MenuOrder As System.Nullable(Of Integer)
	
	Private _SiteRoleID As System.Nullable(Of Integer)
	
	Private _ViewInMenu As System.Nullable(Of Boolean)
	
	Private _SiteApp As EntityRef(Of SiteApp)
	
	Private _SiteRole As EntityRef(Of SiteRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSiteAppIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteAppIDChanged()
    End Sub
    Partial Private Sub OnMenuTextChanging(value As String)
    End Sub
    Partial Private Sub OnMenuTextChanged()
    End Sub
    Partial Private Sub OnTartgetPageChanging(value As String)
    End Sub
    Partial Private Sub OnTartgetPageChanged()
    End Sub
    Partial Private Sub OnGlyphNameChanging(value As String)
    End Sub
    Partial Private Sub OnGlyphNameChanged()
    End Sub
    Partial Private Sub OnMenuOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMenuOrderChanged()
    End Sub
    Partial Private Sub OnSiteRoleIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSiteRoleIDChanged()
    End Sub
    Partial Private Sub OnViewInMenuChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnViewInMenuChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteApp = CType(Nothing, EntityRef(Of SiteApp))
		Me._SiteRole = CType(Nothing, EntityRef(Of SiteRole))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteAppID", DbType:="Int")>  _
	Public Property SiteAppID() As System.Nullable(Of Integer)
		Get
			Return Me._SiteAppID
		End Get
		Set
			If (Me._SiteAppID.Equals(value) = false) Then
				If Me._SiteApp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSiteAppIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteAppID = value
				Me.SendPropertyChanged("SiteAppID")
				Me.OnSiteAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuText", DbType:="NVarChar(50)")>  _
	Public Property MenuText() As String
		Get
			Return Me._MenuText
		End Get
		Set
			If (String.Equals(Me._MenuText, value) = false) Then
				Me.OnMenuTextChanging(value)
				Me.SendPropertyChanging
				Me._MenuText = value
				Me.SendPropertyChanged("MenuText")
				Me.OnMenuTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TartgetPage", DbType:="NVarChar(100)")>  _
	Public Property TartgetPage() As String
		Get
			Return Me._TartgetPage
		End Get
		Set
			If (String.Equals(Me._TartgetPage, value) = false) Then
				Me.OnTartgetPageChanging(value)
				Me.SendPropertyChanging
				Me._TartgetPage = value
				Me.SendPropertyChanged("TartgetPage")
				Me.OnTartgetPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlyphName", DbType:="NVarChar(50)")>  _
	Public Property GlyphName() As String
		Get
			Return Me._GlyphName
		End Get
		Set
			If (String.Equals(Me._GlyphName, value) = false) Then
				Me.OnGlyphNameChanging(value)
				Me.SendPropertyChanging
				Me._GlyphName = value
				Me.SendPropertyChanged("GlyphName")
				Me.OnGlyphNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuOrder", DbType:="Int")>  _
	Public Property MenuOrder() As System.Nullable(Of Integer)
		Get
			Return Me._MenuOrder
		End Get
		Set
			If (Me._MenuOrder.Equals(value) = false) Then
				Me.OnMenuOrderChanging(value)
				Me.SendPropertyChanging
				Me._MenuOrder = value
				Me.SendPropertyChanged("MenuOrder")
				Me.OnMenuOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteRoleID", DbType:="Int")>  _
	Public Property SiteRoleID() As System.Nullable(Of Integer)
		Get
			Return Me._SiteRoleID
		End Get
		Set
			If (Me._SiteRoleID.Equals(value) = false) Then
				If Me._SiteRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSiteRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteRoleID = value
				Me.SendPropertyChanged("SiteRoleID")
				Me.OnSiteRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViewInMenu", DbType:="Bit")>  _
	Public Property ViewInMenu() As System.Nullable(Of Boolean)
		Get
			Return Me._ViewInMenu
		End Get
		Set
			If (Me._ViewInMenu.Equals(value) = false) Then
				Me.OnViewInMenuChanging(value)
				Me.SendPropertyChanging
				Me._ViewInMenu = value
				Me.SendPropertyChanged("ViewInMenu")
				Me.OnViewInMenuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_SiteAppMenu", Storage:="_SiteApp", ThisKey:="SiteAppID", OtherKey:="Id", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property SiteApp() As SiteApp
		Get
			Return Me._SiteApp.Entity
		End Get
		Set
			Dim previousValue As SiteApp = Me._SiteApp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteApp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteApp.Entity = Nothing
					previousValue.SiteAppMenus.Remove(Me)
				End If
				Me._SiteApp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteAppMenus.Add(Me)
					Me._SiteAppID = value.Id
				Else
					Me._SiteAppID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SiteApp")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteRole_SiteAppMenu", Storage:="_SiteRole", ThisKey:="SiteRoleID", OtherKey:="Id", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property SiteRole() As SiteRole
		Get
			Return Me._SiteRole.Entity
		End Get
		Set
			Dim previousValue As SiteRole = Me._SiteRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteRole.Entity = Nothing
					previousValue.SiteAppMenus.Remove(Me)
				End If
				Me._SiteRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteAppMenus.Add(Me)
					Me._SiteRoleID = value.Id
				Else
					Me._SiteRoleID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SiteRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteRole")>  _
Partial Public Class SiteRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _RoleName As String
	
	Private _Active As Boolean
	
	Private _SiteAppMenus As EntitySet(Of SiteAppMenu)
	
	Private _SiteUsers As EntitySet(Of SiteUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteAppMenus = New EntitySet(Of SiteAppMenu)(AddressOf Me.attach_SiteAppMenus, AddressOf Me.detach_SiteAppMenus)
		Me._SiteUsers = New EntitySet(Of SiteUser)(AddressOf Me.attach_SiteUsers, AddressOf Me.detach_SiteUsers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteRole_SiteAppMenu", Storage:="_SiteAppMenus", ThisKey:="Id", OtherKey:="SiteRoleID")>  _
	Public Property SiteAppMenus() As EntitySet(Of SiteAppMenu)
		Get
			Return Me._SiteAppMenus
		End Get
		Set
			Me._SiteAppMenus.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteRole_SiteUser", Storage:="_SiteUsers", ThisKey:="Id", OtherKey:="RoleID")>  _
	Public Property SiteUsers() As EntitySet(Of SiteUser)
		Get
			Return Me._SiteUsers
		End Get
		Set
			Me._SiteUsers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SiteAppMenus(ByVal entity As SiteAppMenu)
		Me.SendPropertyChanging
		entity.SiteRole = Me
	End Sub
	
	Private Sub detach_SiteAppMenus(ByVal entity As SiteAppMenu)
		Me.SendPropertyChanging
		entity.SiteRole = Nothing
	End Sub
	
	Private Sub attach_SiteUsers(ByVal entity As SiteUser)
		Me.SendPropertyChanging
		entity.SiteRole = Me
	End Sub
	
	Private Sub detach_SiteUsers(ByVal entity As SiteUser)
		Me.SendPropertyChanging
		entity.SiteRole = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiteUser")>  _
Partial Public Class SiteUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _DisplayName As String
	
	Private _EmailAddress As String
	
	Private _DateCreated As Date
	
	Private _Password As String
	
	Private _lastLoginDate As Date
	
	Private _RoleID As Integer
	
	Private _UserKey As System.Guid
	
	Private _UserLogin As String
	
	Private _EmailVerified As Boolean
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _VerifyCode As String
	
	Private _AssAccount As String
	
	Private _UserAppProperties As EntitySet(Of UserAppProperty)
	
	Private _UserAppRelations As EntitySet(Of UserAppRelation)
	
	Private _SiteRole As EntityRef(Of SiteRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnlastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnlastLoginDateChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnUserKeyChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserKeyChanged()
    End Sub
    Partial Private Sub OnUserLoginChanging(value As String)
    End Sub
    Partial Private Sub OnUserLoginChanged()
    End Sub
    Partial Private Sub OnEmailVerifiedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEmailVerifiedChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnVerifyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnVerifyCodeChanged()
    End Sub
    Partial Private Sub OnAssAccountChanging(value As String)
    End Sub
    Partial Private Sub OnAssAccountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserAppProperties = New EntitySet(Of UserAppProperty)(AddressOf Me.attach_UserAppProperties, AddressOf Me.detach_UserAppProperties)
		Me._UserAppRelations = New EntitySet(Of UserAppRelation)(AddressOf Me.attach_UserAppRelations, AddressOf Me.detach_UserAppRelations)
		Me._SiteRole = CType(Nothing, EntityRef(Of SiteRole))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property lastLoginDate() As Date
		Get
			Return Me._lastLoginDate
		End Get
		Set
			If ((Me._lastLoginDate = value)  _
						= false) Then
				Me.OnlastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._lastLoginDate = value
				Me.SendPropertyChanged("lastLoginDate")
				Me.OnlastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", DbType:="Int NOT NULL")>  _
	Public Property RoleID() As Integer
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				If Me._SiteRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserKey", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserKey() As System.Guid
		Get
			Return Me._UserKey
		End Get
		Set
			If ((Me._UserKey = value)  _
						= false) Then
				Me.OnUserKeyChanging(value)
				Me.SendPropertyChanging
				Me._UserKey = value
				Me.SendPropertyChanged("UserKey")
				Me.OnUserKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserLogin", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property UserLogin() As String
		Get
			Return Me._UserLogin
		End Get
		Set
			If (String.Equals(Me._UserLogin, value) = false) Then
				Me.OnUserLoginChanging(value)
				Me.SendPropertyChanging
				Me._UserLogin = value
				Me.SendPropertyChanged("UserLogin")
				Me.OnUserLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailVerified", DbType:="Bit NOT NULL")>  _
	Public Property EmailVerified() As Boolean
		Get
			Return Me._EmailVerified
		End Get
		Set
			If ((Me._EmailVerified = value)  _
						= false) Then
				Me.OnEmailVerifiedChanging(value)
				Me.SendPropertyChanging
				Me._EmailVerified = value
				Me.SendPropertyChanged("EmailVerified")
				Me.OnEmailVerifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VerifyCode", DbType:="NVarChar(50)")>  _
	Public Property VerifyCode() As String
		Get
			Return Me._VerifyCode
		End Get
		Set
			If (String.Equals(Me._VerifyCode, value) = false) Then
				Me.OnVerifyCodeChanging(value)
				Me.SendPropertyChanging
				Me._VerifyCode = value
				Me.SendPropertyChanged("VerifyCode")
				Me.OnVerifyCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssAccount", DbType:="NVarChar(50)")>  _
	Public Property AssAccount() As String
		Get
			Return Me._AssAccount
		End Get
		Set
			If (String.Equals(Me._AssAccount, value) = false) Then
				Me.OnAssAccountChanging(value)
				Me.SendPropertyChanging
				Me._AssAccount = value
				Me.SendPropertyChanged("AssAccount")
				Me.OnAssAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteUser_UserAppProperty", Storage:="_UserAppProperties", ThisKey:="Id", OtherKey:="UserID")>  _
	Public Property UserAppProperties() As EntitySet(Of UserAppProperty)
		Get
			Return Me._UserAppProperties
		End Get
		Set
			Me._UserAppProperties.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteUser_UserAppRelation", Storage:="_UserAppRelations", ThisKey:="Id", OtherKey:="UserID")>  _
	Public Property UserAppRelations() As EntitySet(Of UserAppRelation)
		Get
			Return Me._UserAppRelations
		End Get
		Set
			Me._UserAppRelations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteRole_SiteUser", Storage:="_SiteRole", ThisKey:="RoleID", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property SiteRole() As SiteRole
		Get
			Return Me._SiteRole.Entity
		End Get
		Set
			Dim previousValue As SiteRole = Me._SiteRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteRole.Entity = Nothing
					previousValue.SiteUsers.Remove(Me)
				End If
				Me._SiteRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiteUsers.Add(Me)
					Me._RoleID = value.Id
				Else
					Me._RoleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserAppProperties(ByVal entity As UserAppProperty)
		Me.SendPropertyChanging
		entity.SiteUser = Me
	End Sub
	
	Private Sub detach_UserAppProperties(ByVal entity As UserAppProperty)
		Me.SendPropertyChanging
		entity.SiteUser = Nothing
	End Sub
	
	Private Sub attach_UserAppRelations(ByVal entity As UserAppRelation)
		Me.SendPropertyChanging
		entity.SiteUser = Me
	End Sub
	
	Private Sub detach_UserAppRelations(ByVal entity As UserAppRelation)
		Me.SendPropertyChanging
		entity.SiteUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserAppProperty")>  _
Partial Public Class UserAppProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserID As Integer
	
	Private _AppID As Integer
	
	Private _Key As String
	
	Private _Value As String
	
	Private _SiteUser As EntityRef(Of SiteUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnAppIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAppIDChanged()
    End Sub
    Partial Private Sub OnKeyChanging(value As String)
    End Sub
    Partial Private Sub OnKeyChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteUser = CType(Nothing, EntityRef(Of SiteUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._SiteUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppID", DbType:="Int NOT NULL")>  _
	Public Property AppID() As Integer
		Get
			Return Me._AppID
		End Get
		Set
			If ((Me._AppID = value)  _
						= false) Then
				Me.OnAppIDChanging(value)
				Me.SendPropertyChanging
				Me._AppID = value
				Me.SendPropertyChanged("AppID")
				Me.OnAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Key]", Storage:="_Key", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Key() As String
		Get
			Return Me._Key
		End Get
		Set
			If (String.Equals(Me._Key, value) = false) Then
				Me.OnKeyChanging(value)
				Me.SendPropertyChanging
				Me._Key = value
				Me.SendPropertyChanged("Key")
				Me.OnKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteUser_UserAppProperty", Storage:="_SiteUser", ThisKey:="UserID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SiteUser() As SiteUser
		Get
			Return Me._SiteUser.Entity
		End Get
		Set
			Dim previousValue As SiteUser = Me._SiteUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteUser.Entity = Nothing
					previousValue.UserAppProperties.Remove(Me)
				End If
				Me._SiteUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserAppProperties.Add(Me)
					Me._UserID = value.Id
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserAppRelation")>  _
Partial Public Class UserAppRelation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _UserID As Integer
	
	Private _SiteAppID As Integer
	
	Private _IsDemo As Boolean
	
	Private _StartupDate As Date
	
	Private _isMonthlyPrice As Boolean
	
	Private _Price As Decimal
	
	Private _UserInroled As Boolean
	
	Private _IsUserAdmin As Boolean
	
	Private _SiteApp As EntityRef(Of SiteApp)
	
	Private _SiteUser As EntityRef(Of SiteUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnSiteAppIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSiteAppIDChanged()
    End Sub
    Partial Private Sub OnIsDemoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDemoChanged()
    End Sub
    Partial Private Sub OnStartupDateChanging(value As Date)
    End Sub
    Partial Private Sub OnStartupDateChanged()
    End Sub
    Partial Private Sub OnisMonthlyPriceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnisMonthlyPriceChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnUserInroledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUserInroledChanged()
    End Sub
    Partial Private Sub OnIsUserAdminChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsUserAdminChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiteApp = CType(Nothing, EntityRef(Of SiteApp))
		Me._SiteUser = CType(Nothing, EntityRef(Of SiteUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._SiteUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SiteAppID", DbType:="Int NOT NULL")>  _
	Public Property SiteAppID() As Integer
		Get
			Return Me._SiteAppID
		End Get
		Set
			If ((Me._SiteAppID = value)  _
						= false) Then
				If Me._SiteApp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSiteAppIDChanging(value)
				Me.SendPropertyChanging
				Me._SiteAppID = value
				Me.SendPropertyChanged("SiteAppID")
				Me.OnSiteAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDemo", DbType:="Bit NOT NULL")>  _
	Public Property IsDemo() As Boolean
		Get
			Return Me._IsDemo
		End Get
		Set
			If ((Me._IsDemo = value)  _
						= false) Then
				Me.OnIsDemoChanging(value)
				Me.SendPropertyChanging
				Me._IsDemo = value
				Me.SendPropertyChanged("IsDemo")
				Me.OnIsDemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartupDate", DbType:="DateTime NOT NULL")>  _
	Public Property StartupDate() As Date
		Get
			Return Me._StartupDate
		End Get
		Set
			If ((Me._StartupDate = value)  _
						= false) Then
				Me.OnStartupDateChanging(value)
				Me.SendPropertyChanging
				Me._StartupDate = value
				Me.SendPropertyChanged("StartupDate")
				Me.OnStartupDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isMonthlyPrice", DbType:="Bit NOT NULL")>  _
	Public Property isMonthlyPrice() As Boolean
		Get
			Return Me._isMonthlyPrice
		End Get
		Set
			If ((Me._isMonthlyPrice = value)  _
						= false) Then
				Me.OnisMonthlyPriceChanging(value)
				Me.SendPropertyChanging
				Me._isMonthlyPrice = value
				Me.SendPropertyChanged("isMonthlyPrice")
				Me.OnisMonthlyPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserInroled", DbType:="Bit NOT NULL")>  _
	Public Property UserInroled() As Boolean
		Get
			Return Me._UserInroled
		End Get
		Set
			If ((Me._UserInroled = value)  _
						= false) Then
				Me.OnUserInroledChanging(value)
				Me.SendPropertyChanging
				Me._UserInroled = value
				Me.SendPropertyChanged("UserInroled")
				Me.OnUserInroledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsUserAdmin", DbType:="Bit NOT NULL")>  _
	Public Property IsUserAdmin() As Boolean
		Get
			Return Me._IsUserAdmin
		End Get
		Set
			If ((Me._IsUserAdmin = value)  _
						= false) Then
				Me.OnIsUserAdminChanging(value)
				Me.SendPropertyChanging
				Me._IsUserAdmin = value
				Me.SendPropertyChanged("IsUserAdmin")
				Me.OnIsUserAdminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteApp_UserAppRelation", Storage:="_SiteApp", ThisKey:="SiteAppID", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property SiteApp() As SiteApp
		Get
			Return Me._SiteApp.Entity
		End Get
		Set
			Dim previousValue As SiteApp = Me._SiteApp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteApp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteApp.Entity = Nothing
					previousValue.UserAppRelations.Remove(Me)
				End If
				Me._SiteApp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserAppRelations.Add(Me)
					Me._SiteAppID = value.Id
				Else
					Me._SiteAppID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteApp")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiteUser_UserAppRelation", Storage:="_SiteUser", ThisKey:="UserID", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property SiteUser() As SiteUser
		Get
			Return Me._SiteUser.Entity
		End Get
		Set
			Dim previousValue As SiteUser = Me._SiteUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiteUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiteUser.Entity = Nothing
					previousValue.UserAppRelations.Remove(Me)
				End If
				Me._SiteUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserAppRelations.Add(Me)
					Me._UserID = value.Id
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SiteUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserMessages")>  _
Partial Public Class UserMessage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ToUserID As System.Nullable(Of Integer)
	
	Private _FromUserID As System.Nullable(Of Integer)
	
	Private _Message As String
	
	Private _Opened As System.Nullable(Of Boolean)
	
	Private _CratedDateTime As System.Nullable(Of Date)
	
	Private _Subject As String
	
	Private _Deleted As System.Nullable(Of Boolean)
	
	Private _AppID As System.Nullable(Of Integer)
	
	Private _ShowonPage As System.Nullable(Of Integer)
	
	Private _FromApp As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnToUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnToUserIDChanged()
    End Sub
    Partial Private Sub OnFromUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFromUserIDChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnOpenedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOpenedChanged()
    End Sub
    Partial Private Sub OnCratedDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCratedDateTimeChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    Partial Private Sub OnAppIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAppIDChanged()
    End Sub
    Partial Private Sub OnShowonPageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShowonPageChanged()
    End Sub
    Partial Private Sub OnFromAppChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFromAppChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToUserID", DbType:="Int")>  _
	Public Property ToUserID() As System.Nullable(Of Integer)
		Get
			Return Me._ToUserID
		End Get
		Set
			If (Me._ToUserID.Equals(value) = false) Then
				Me.OnToUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ToUserID = value
				Me.SendPropertyChanged("ToUserID")
				Me.OnToUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromUserID", DbType:="Int")>  _
	Public Property FromUserID() As System.Nullable(Of Integer)
		Get
			Return Me._FromUserID
		End Get
		Set
			If (Me._FromUserID.Equals(value) = false) Then
				Me.OnFromUserIDChanging(value)
				Me.SendPropertyChanging
				Me._FromUserID = value
				Me.SendPropertyChanged("FromUserID")
				Me.OnFromUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="NVarChar(MAX)")>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Opened", DbType:="Bit")>  _
	Public Property Opened() As System.Nullable(Of Boolean)
		Get
			Return Me._Opened
		End Get
		Set
			If (Me._Opened.Equals(value) = false) Then
				Me.OnOpenedChanging(value)
				Me.SendPropertyChanging
				Me._Opened = value
				Me.SendPropertyChanged("Opened")
				Me.OnOpenedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CratedDateTime", DbType:="DateTime")>  _
	Public Property CratedDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CratedDateTime
		End Get
		Set
			If (Me._CratedDateTime.Equals(value) = false) Then
				Me.OnCratedDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CratedDateTime = value
				Me.SendPropertyChanged("CratedDateTime")
				Me.OnCratedDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(50)")>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit")>  _
	Public Property Deleted() As System.Nullable(Of Boolean)
		Get
			Return Me._Deleted
		End Get
		Set
			If (Me._Deleted.Equals(value) = false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AppID", DbType:="Int")>  _
	Public Property AppID() As System.Nullable(Of Integer)
		Get
			Return Me._AppID
		End Get
		Set
			If (Me._AppID.Equals(value) = false) Then
				Me.OnAppIDChanging(value)
				Me.SendPropertyChanging
				Me._AppID = value
				Me.SendPropertyChanged("AppID")
				Me.OnAppIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowonPage", DbType:="Int")>  _
	Public Property ShowonPage() As System.Nullable(Of Integer)
		Get
			Return Me._ShowonPage
		End Get
		Set
			If (Me._ShowonPage.Equals(value) = false) Then
				Me.OnShowonPageChanging(value)
				Me.SendPropertyChanging
				Me._ShowonPage = value
				Me.SendPropertyChanged("ShowonPage")
				Me.OnShowonPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromApp", DbType:="Bit")>  _
	Public Property FromApp() As System.Nullable(Of Boolean)
		Get
			Return Me._FromApp
		End Get
		Set
			If (Me._FromApp.Equals(value) = false) Then
				Me.OnFromAppChanging(value)
				Me.SendPropertyChanging
				Me._FromApp = value
				Me.SendPropertyChanged("FromApp")
				Me.OnFromAppChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
